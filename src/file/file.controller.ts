import { Controller, Post, UseInterceptors, UploadedFile, Get, Query } from '@nestjs/common';
import { FileInterceptor } from '@nestjs/platform-express';
import { FileService } from './file.service';


// –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ssh -L 5432:localhost:5432 -i "D:\keypem\my-ec2-key.pem" ec2-user@35.180.208.103
@Controller('files')
export class FileController {
	constructor(private readonly fileService: FileService) { }
	@Get()
  async getFilesByCourse(@Query('courseId') courseId: string) {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è courseId
    let validCourseId: number;
    if (!courseId || courseId.trim() === '' || isNaN(Number(courseId))) {
      validCourseId = 1; // ID –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      console.log(`‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π courseId "${courseId}", –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ID –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1`);
    } else {
      validCourseId = Number(courseId);
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è courseId: ${validCourseId}`);
    }
    
    return this.fileService.getFilesByCourse(validCourseId);
  }

	@Post('upload')
  @UseInterceptors(FileInterceptor('file'))
  async uploadFile(
    @UploadedFile() file: Express.Multer.File,
    @Query('courseId') courseId: string,  // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
  ) {
    console.log('üì§ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞:', file.originalname, 'courseId:', courseId);
    const result = await this.fileService.uploadFile(file, courseId);
    return result;
  }
}
