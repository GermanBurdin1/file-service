import { Injectable } from '@nestjs/common';
// AWS S3 imports (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è)
// import { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';
import { v4 as uuidv4 } from 'uuid';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { FileEntity } from './file.entity';
// –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
import * as fs from 'fs';
import * as path from 'path';

@Injectable()
export class FileService {
  // AWS S3 –∫–ª–∏–µ–Ω—Ç (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ)
  // private s3 = new S3Client({
  //   region: process.env.AWS_REGION,
  //   credentials: {
  //     accessKeyId: process.env.AWS_ACCESS_KEY_ID,
  //     secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  //   },
  // });

  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
  private readonly uploadPath = path.join(process.cwd(), 'uploads');

  constructor(
    @InjectRepository(FileEntity)
    private readonly fileRepository: Repository<FileEntity>,
  ) {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É uploads –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è)
    if (!fs.existsSync(this.uploadPath)) {
      fs.mkdirSync(this.uploadPath, { recursive: true });
    }
  }

  async uploadFile(file: Express.Multer.File, courseId: string): Promise<{ id: number; url: string; createdAt: Date }> {
    try {
      let fileUrl: string;
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ courseId
      let validCourseId: number;
      if (!courseId || courseId.trim() === '') {
        validCourseId = 1; // ID –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ–±—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        console.log('‚ö†Ô∏è courseId –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ID –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1');
      } else if (isNaN(Number(courseId))) {
        // –ï—Å–ª–∏ courseId –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'materials'), –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        validCourseId = 1; 
        console.log(`‚ö†Ô∏è courseId "${courseId}" –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ID –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1`);
      } else {
        validCourseId = Number(courseId);
        console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è courseId: ${validCourseId}`);
      }
      
      // –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const storageMode = process.env.STORAGE_MODE || 'local'; // 'local' –∏–ª–∏ 'aws'

      if (storageMode === 'aws') {
        // ==================== AWS S3 VERSION ====================
        console.log('‚òÅÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è AWS S3 —Ö—Ä–∞–Ω–µ–Ω–∏–µ');
        // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AWS S3:
        // const fileKey = `uploads/${uuidv4()}-${file.originalname}`;
        // fileUrl = `https://${process.env.AWS_S3_BUCKET_NAME}.s3.amazonaws.com/${fileKey}`;
        // 
        // await this.s3.send(new PutObjectCommand({
        //   Bucket: process.env.AWS_S3_BUCKET_NAME,
        //   Key: fileKey,
        //   Body: file.buffer,
        //   ContentType: file.mimetype,
        // }));
        
        // –í–†–ï–ú–ï–ù–ù–ê–Ø –ó–ê–ì–õ–£–®–ö–ê (—É–¥–∞–ª–∏—Ç—å –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ AWS):
        throw new Error('AWS S3 —Ä–µ–∂–∏–º –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∫–æ–¥ –≤—ã—à–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ AWS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.');
        
      } else {
        // ==================== LOCAL STORAGE VERSION (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) ====================
        console.log('üíæ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ');
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        const fileExtension = path.extname(file.originalname);
        const fileName = `${uuidv4()}${fileExtension}`;
        const filePath = path.join(this.uploadPath, fileName);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
        fs.writeFileSync(filePath, file.buffer);
        
        // URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
        fileUrl = `http://localhost:3008/uploads/${fileName}`;
        
        console.log('üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ:', filePath);
        console.log('üîó URL —Ñ–∞–π–ª–∞:', fileUrl);
      }

      // ==================== COMMON CODE FOR BOTH VERSIONS ====================
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ PostgreSQL
      const newFile = this.fileRepository.create({
        filename: file.originalname,
        url: fileUrl,
        mimetype: file.mimetype,
        courseId: validCourseId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π courseId
      });

      const savedFile = await this.fileRepository.save(newFile);

      console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î —Å courseId:', validCourseId);

      return {
        id: savedFile.id,
        url: savedFile.url,
        createdAt: savedFile.createdAt,
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:', error);
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${error.message}`);
    }
  }

  async getFilesByCourse(courseId: number): Promise<FileEntity[]> {
    return this.fileRepository.find({ where: { courseId } });
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è)
  async deleteFile(fileId: number): Promise<boolean> {
    try {
      const file = await this.fileRepository.findOne({ where: { id: fileId } });
      if (!file) {
        return false;
      }

      // ==================== LOCAL STORAGE DELETE ====================
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL
      const fileName = path.basename(file.url);
      const filePath = path.join(this.uploadPath, fileName);

      // –£–¥–∞–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª
      if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
      }

      // ==================== AWS S3 DELETE (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ) ====================
      // const fileKey = file.url.split('.amazonaws.com/')[1];
      // await this.s3.send(new DeleteObjectCommand({
      //   Bucket: process.env.AWS_S3_BUCKET_NAME,
      //   Key: fileKey,
      // }));

      // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
      await this.fileRepository.delete(fileId);
      
      console.log('üóëÔ∏è –§–∞–π–ª —É–¥–∞–ª–µ–Ω:', filePath);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
      return false;
    }
  }
}
